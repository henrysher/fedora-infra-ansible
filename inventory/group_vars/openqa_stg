# This setup is a bit out of the ordinary for a staging system. As the openqa
# scheduler needs up-to-date information from the wiki and koji, it doesn't
# work well as a proper staging host.
#
# We decided to keep it a pseudo-staging host that will get new versions of
# openqa first and will be a staging host for most intensive purposes but from
# a firewall rule POV, it will be a staging-friendly production host
#
# it should still be using the stg proxies and the external hostname will still
# be stg.fedoraproject.org

# this is to enable nested virt, which we need for disk image creation
virt_install_command: "{{ virt_install_command_one_nic }} --cpu=host-passthrough,+vmx"

external_hostname: openqa.stg.fedoraproject.org

openqa_dbname: openqa-stg
openqa_dbhost: db-qa03.qa.fedoraproject.org
openqa_dbuser: openqastg
openqa_dbpassword: "{{ stg_openqa_dbpassword }}"
openqa_assetsize_ppc: 150
openqa_assetsize_aarch64: 150

openqa_key: "{{ stg_openqa_apikey }}"
openqa_secret: "{{ stg_openqa_apisecret }}"

openqa_webapi_plugins: FedoraMessaging FedoraUpdateRestart

# this is because openqa staging isn't really a staging host
# we don't want to set env_suffix to stg on it because that may
# break some other plays, but we do need the env suffix for the
# fedora-messaging bits, so let's make our own
openqa_env_suffix: .stg
openqa_env: staging

# for now, we have the 'extra' arches (ppc64 and aarch64) on stg
openqa_extraarches: true

wikitcms_token: "{{ private }}/files/openidc/staging/wikitcms.json"
openqa_wikitcms_hostname: stg.fedoraproject.org
openqa_resultsdb_url: http://resultsdb-stg01.qa.fedoraproject.org/resultsdb_api/api/v2.0/

# FIXME: disable consumers that write to wiki until auth key
# is working again:
# https://pagure.io/fedora-infrastructure/issue/8381
openqa_amqp_wiki_reporter_queue:

deployment_type: stg
freezes: false

# makes sure it sends stg not prod fedmsgs
fedmsg_env: stg
