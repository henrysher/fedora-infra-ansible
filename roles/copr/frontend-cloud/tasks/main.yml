---
- import_tasks: "mount_fs.yml"

- name: register security context for pgsql directory
  command: "ls -dZ /var/lib/pgsql"
  register: pgsql_ls
  changed_when: False  # `ls' command is not changing anything

- name: update selinux context for postgress db dir if it's wrong
  command: "restorecon -vvRF /var/lib/pgsql"
  when: pgsql_ls.stdout is defined and 'postgresql_db_t' not in  pgsql_ls.stdout

- name: install daily custom copr-frontend-crontab
  copy: src=cron.daily/copr-frontend-optional dest=/etc/cron.daily/
  tags: [cron_tasks]

- name: install hourly custom copr-frontend-crontab
  copy: src=cron.hourly/copr-frontend-optional dest=/etc/cron.hourly/
  tags: [cron_tasks]

- name: install copr-frontend and copr-selinux
  dnf:
    state: present
    name:
      - copr-frontend
      - copr-selinux
  tags:
  - packages

  # we install python-alembic because https://bugzilla.redhat.com/show_bug.cgi?id=1536058
- name: install additional pkgs for copr-frontend
  dnf:
    state: present
    pkg:
      - "bash-completion"
      - "mod_ssl"
      - redis
      - pxz
      - python3-alembic
  tags:
  - packages

- name: directory for postgresql dumps
  file: state=directory path=/var/www/html/db_dumps/
        owner=copr-fe mode=755

- name: install copr configs
  template: src="copr.conf" dest=/etc/copr/copr.conf mode=600
  notify:
  - reload httpd
  tags:
  - config

- name: enable and start redis  # TODO: .service in copr-backend should depend on redis
  service: name=redis enabled=yes state=started

- name: copy apache files to conf.d
  copy: src="httpd/{{ item }}" dest="/etc/httpd/conf.d/{{ item }}"
  with_items:
  - "welcome.conf"
  tags:
  - config

- name: copy apache files to conf.d (templates)
  template: src="httpd/{{ item }}" dest="/etc/httpd/conf.d/{{ item }}"
  with_items:
  - "coprs.conf"
  tags:
  - config

# https://bugzilla.redhat.com/show_bug.cgi?id=1535689
- name: Allow execmem for Apache
  seboolean:
    name: httpd_execmem
    state: yes
    persistent: yes

- import_tasks: "psql_setup.yml"

- name: upgrade db to head
  command: alembic-3 upgrade head
  become: yes
  become_user: copr-fe
  args:
    chdir: /usr/share/copr/coprs_frontend/
  register: alembic_result
  changed_when: alembic_result.stdout is search("Running upgrade")

# TODO: move production to lets-encrypt as well
- name: install ssl certificates for production
  import_tasks: "install_certs.yml"
  when: not devel
  tags:
  - config

# development servers use Let's Encrypt
- name: install letsencrypt ssl certificates for dev
  include_role: name=copr/certbot
  when: devel|bool
  tags:
  - config

- name: install copr-frontend ssl vhost
  template: src="httpd/coprs_ssl.conf.j2" dest="/etc/httpd/conf.d/coprs_ssl.conf"
  tags:
  - config

- name: enable services
  service: state=started enabled=yes name={{ item }}
  with_items:
  - httpd
  - crond

- name: set dev banner for dev instance
  when: devel|bool
  copy: src=banner-include.html dest=/var/lib/copr/

- name: disallow robots on dev instance
  when: devel|bool
  copy: src=robots.txt dest=/var/www/html/


- name: register whether indexes rebuild is required
  command: copr-frontend update_indexes_required
  become: yes
  become_user: copr-fe
  register: update_indexes_required_result
  changed_when: False
  failed_when: False

- name: rebuild indexes
  command: ./manage.py update_indexes
  become: yes
  become_user: copr-fe
  args:
    chdir: /usr/share/copr/coprs_frontend/
  when: update_indexes_required_result.rc != 0

- name: make sure /etc/fedora-messaging directory exists
  file: path=/etc/fedora-messaging state=directory

- name: install fedora messaging config for Copr
  template: src="fedora-messaging/copr_messaging.toml" dest="/etc/fedora-messaging/copr_messaging.toml"
  tags:
  - config

- name: start fm-consumer service
  service: state=started enabled=yes name="fm-consumer@copr_messaging"
  when: devel|bool  # Remove this condition on next copr-frontend release
